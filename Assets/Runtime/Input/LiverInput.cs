//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Runtime/Input/LiverInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LiverDie
{
    public partial class @LiverInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @LiverInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""LiverInput"",
    ""maps"": [
        {
            ""name"": ""Gremlin"",
            ""id"": ""824017ac-eca2-4691-94bd-30d34ce92554"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1a9743fb-3315-477b-802d-1e732f93cd28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""c4355aff-f4d3-493b-acbc-e4243ab55ed0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9f381cbf-d777-4cec-98d9-5019557e3220"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3ea43c5-56bf-427a-a696-ea7fa4f70d0c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""bd8c3bb8-0cc2-4263-94d9-9e65cc4f18a9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""43fb75f1-20e1-44a2-9cfd-622fb54b8199"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7d602997-b4e7-411f-91da-96d3a412accf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c87727d1-7b6d-4578-acda-a820991dc01f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0dc087c8-041b-4fd9-91d9-20163cb8417e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""43f0538c-8137-4e3f-8cef-e7b1e2107e16"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75a31c04-2411-4d1a-992a-2acc6009a12c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bf15e4c-180d-4215-8a77-17326ea90b72"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5eb5c40d-ef55-4aea-8d89-fafd64347aec"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""a90616ea-3378-4264-b35b-dd46504e1d04"",
            ""actions"": [
                {
                    ""name"": ""Talk"",
                    ""type"": ""Button"",
                    ""id"": ""9bfcec33-357a-4a78-8ee2-569f3a8d03a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""89bcb1a6-e76b-4cf6-95d2-9f807794c82d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75bb8315-14b8-4431-a4ef-6917ee839696"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Talk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d321877d-523f-4e1d-9e16-e3290a7cf9b5"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Talk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eee77144-dc71-41d6-a157-3cf4666f998d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70eb3fcb-751a-4610-9a6e-19ad93d75e95"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""89528310-a405-490b-9397-3885343f1e91"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""5b2ff570-8922-41f3-9f79-149c4d2f5ab8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6fe42ee0-8f59-4f04-80fa-d1070ae9fe55"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd9d480b-e6fb-4eb0-8c0a-15f6691e999e"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Deliver"",
            ""id"": ""84b6fe7e-f2e6-4536-a2dd-ff217f48c7eb"",
            ""actions"": [
                {
                    ""name"": ""Deliver"",
                    ""type"": ""Button"",
                    ""id"": ""ab5d61a0-092a-4039-b4e2-e78a7d6890a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0901b76b-74a3-4211-83aa-8483ff89b0cd"",
                    ""path"": ""<Keyboard>/#(X)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deliver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c26d0428-95e8-42b7-a120-4108940998c6"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deliver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Gremlin
            m_Gremlin = asset.FindActionMap("Gremlin", throwIfNotFound: true);
            m_Gremlin_Movement = m_Gremlin.FindAction("Movement", throwIfNotFound: true);
            m_Gremlin_Look = m_Gremlin.FindAction("Look", throwIfNotFound: true);
            m_Gremlin_Jump = m_Gremlin.FindAction("Jump", throwIfNotFound: true);
            // Dialogue
            m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
            m_Dialogue_Talk = m_Dialogue.FindAction("Talk", throwIfNotFound: true);
            m_Dialogue_Click = m_Dialogue.FindAction("Click", throwIfNotFound: true);
            // Pause
            m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
            m_Pause_Pause = m_Pause.FindAction("Pause", throwIfNotFound: true);
            // Deliver
            m_Deliver = asset.FindActionMap("Deliver", throwIfNotFound: true);
            m_Deliver_Deliver = m_Deliver.FindAction("Deliver", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gremlin
        private readonly InputActionMap m_Gremlin;
        private List<IGremlinActions> m_GremlinActionsCallbackInterfaces = new List<IGremlinActions>();
        private readonly InputAction m_Gremlin_Movement;
        private readonly InputAction m_Gremlin_Look;
        private readonly InputAction m_Gremlin_Jump;
        public struct GremlinActions
        {
            private @LiverInput m_Wrapper;
            public GremlinActions(@LiverInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Gremlin_Movement;
            public InputAction @Look => m_Wrapper.m_Gremlin_Look;
            public InputAction @Jump => m_Wrapper.m_Gremlin_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Gremlin; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GremlinActions set) { return set.Get(); }
            public void AddCallbacks(IGremlinActions instance)
            {
                if (instance == null || m_Wrapper.m_GremlinActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GremlinActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(IGremlinActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(IGremlinActions instance)
            {
                if (m_Wrapper.m_GremlinActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGremlinActions instance)
            {
                foreach (var item in m_Wrapper.m_GremlinActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GremlinActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GremlinActions @Gremlin => new GremlinActions(this);

        // Dialogue
        private readonly InputActionMap m_Dialogue;
        private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
        private readonly InputAction m_Dialogue_Talk;
        private readonly InputAction m_Dialogue_Click;
        public struct DialogueActions
        {
            private @LiverInput m_Wrapper;
            public DialogueActions(@LiverInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Talk => m_Wrapper.m_Dialogue_Talk;
            public InputAction @Click => m_Wrapper.m_Dialogue_Click;
            public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
            public void AddCallbacks(IDialogueActions instance)
            {
                if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
                @Talk.started += instance.OnTalk;
                @Talk.performed += instance.OnTalk;
                @Talk.canceled += instance.OnTalk;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }

            private void UnregisterCallbacks(IDialogueActions instance)
            {
                @Talk.started -= instance.OnTalk;
                @Talk.performed -= instance.OnTalk;
                @Talk.canceled -= instance.OnTalk;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
            }

            public void RemoveCallbacks(IDialogueActions instance)
            {
                if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDialogueActions instance)
            {
                foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DialogueActions @Dialogue => new DialogueActions(this);

        // Pause
        private readonly InputActionMap m_Pause;
        private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
        private readonly InputAction m_Pause_Pause;
        public struct PauseActions
        {
            private @LiverInput m_Wrapper;
            public PauseActions(@LiverInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_Pause_Pause;
            public InputActionMap Get() { return m_Wrapper.m_Pause; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
            public void AddCallbacks(IPauseActions instance)
            {
                if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }

            private void UnregisterCallbacks(IPauseActions instance)
            {
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
            }

            public void RemoveCallbacks(IPauseActions instance)
            {
                if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPauseActions instance)
            {
                foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PauseActions @Pause => new PauseActions(this);

        // Deliver
        private readonly InputActionMap m_Deliver;
        private List<IDeliverActions> m_DeliverActionsCallbackInterfaces = new List<IDeliverActions>();
        private readonly InputAction m_Deliver_Deliver;
        public struct DeliverActions
        {
            private @LiverInput m_Wrapper;
            public DeliverActions(@LiverInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Deliver => m_Wrapper.m_Deliver_Deliver;
            public InputActionMap Get() { return m_Wrapper.m_Deliver; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DeliverActions set) { return set.Get(); }
            public void AddCallbacks(IDeliverActions instance)
            {
                if (instance == null || m_Wrapper.m_DeliverActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DeliverActionsCallbackInterfaces.Add(instance);
                @Deliver.started += instance.OnDeliver;
                @Deliver.performed += instance.OnDeliver;
                @Deliver.canceled += instance.OnDeliver;
            }

            private void UnregisterCallbacks(IDeliverActions instance)
            {
                @Deliver.started -= instance.OnDeliver;
                @Deliver.performed -= instance.OnDeliver;
                @Deliver.canceled -= instance.OnDeliver;
            }

            public void RemoveCallbacks(IDeliverActions instance)
            {
                if (m_Wrapper.m_DeliverActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDeliverActions instance)
            {
                foreach (var item in m_Wrapper.m_DeliverActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DeliverActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DeliverActions @Deliver => new DeliverActions(this);
        public interface IGremlinActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface IDialogueActions
        {
            void OnTalk(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
        }
        public interface IPauseActions
        {
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IDeliverActions
        {
            void OnDeliver(InputAction.CallbackContext context);
        }
    }
}
